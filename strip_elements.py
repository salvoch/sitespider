import pandoc
import pandoc.types
from pathlib import Path
from typing import TypeAlias

PandocFileType: TypeAlias = pandoc.types.Pandoc


class PandocStripper():
    '''Class for stripping and returning certain elements of a pandoc file type'''

    def __init__(self, pandoc_file: PandocFileType) -> None:
        self.pandoc_file: PandocFileType = pandoc_file

    def strip_title(self) -> str:
        '''Given an pandoc file generated by pandoc.read(),
            return the parsed H1 header as as tring'''

        if len(self.pandoc_file) < 2:
            print("Empty .md file, no title to strip")  # TODO - do this in a logger.warning()
            return ""

        # Iterate through each element, find a #H1 header
        for element in self.pandoc_file[1]:
            if isinstance(element, pandoc.types.Header):
                if element[0] == 1:
                    # Remove the preceding "# ", and strip the \n, \r, and \t's.
                    # Also, preserve any additional # and \ found within the sentence
                    pan_string = pandoc.write(element, format="markdown")
                    return "# ".join(pan_string.strip().split('# ')[1:]).replace("\\", "")

        print("No title (aka an H1 (#)) element found in file ")  # TODO - do this in a logger.warning()
        return ""


def pandify_file(file_path: Path) -> PandocFileType:
    '''Given a Path object to a markdown file, return the file converted into a Pandoc object'''

    # TODO - This is reused from render_html.convert_md_file_to_html, how to avoid?
    # Check to make sure file exists
    if not file_path.exists():
        raise Exception  # TODO - create actual exception

    # Check to make sure .md file was passed
    if file_path.suffix != ".md":
        raise Exception  # TODO - create actual exception

    with file_path.open() as file:
        read_file = file.read()
        pan_doc = pandoc.read(read_file, format="markdown")

    return pan_doc


if __name__ == '__main__':
    pth = Path('test.md')
    pan_obj = PandocStripper(pandify_file(pth))
    print(pan_obj.strip_title())
